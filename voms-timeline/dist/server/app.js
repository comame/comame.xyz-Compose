!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=n(o(1)),i=n(o(2)),u=n(o(3)),l=i.default.MongoClient,s=r.default();let a;s.get("**",r.default.static(u.default.resolve(__dirname,"../front"))),s.all("/sub/hook",async(e,t)=>{await a.collection("subs-log").insertOne({time:Date.now(),req:{url:e.originalUrl,method:e.method,body:e.body,headers:e.headers}}),t.send("ok")}),s.get("/sub/logs",async(e,t)=>{const o=await a.collection("subs-log").find().sort({time:1}).toArray();t.send(JSON.stringify(o,void 0,2))}),l.connect("mongodb://mongo:27017",{useUnifiedTopology:!0},(e,t)=>{if(e)throw e;a=t.db("voms-timeline"),s.listen(80,()=>{console.log("LISTEN")})})},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("mongodb")},function(e,t){e.exports=require("path")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,